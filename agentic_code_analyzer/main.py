"""
This module provides a command-line interface for running the Health Scoring Agent.

It reads a code snippet from a local file (`sample.py`), initializes the
`CodeAnalyzerOrchestrator`, and runs the analysis, printing the final JSON
output to the console. This script is intended for local testing and development
purposes.
"""

import asyncio
import json
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.genai import types
from agentic_code_analyzer.orchestrator import CodeAnalyzerOrchestrator
from dotenv import load_dotenv

load_dotenv()


async def main() -> None:
    """
    Runs the agentic code analyzer for local testing.

    This function reads a code snippet from 'sample.py', sets up an in-memory
    session, and invokes the `CodeAnalyzerOrchestrator` to perform the analysis.
    The final JSON result is pretty-printed to the console.

    Raises:
        FileNotFoundError: If `sample.py` does not exist.
        ValueError: If `sample.py` is empty.
    """
    # Attempt to read the code snippet from the local file.
    try:
        with open("sample.py", "r") as f:
            code_snippet = f.read()
        if not code_snippet:
            raise ValueError("The file sample.py is empty.")
    except FileNotFoundError:
        print("Error: The file sample.py was not found in the root directory.")
        return

    # Initialize an in-memory session service to manage the agent's state.
    session_service = InMemorySessionService()
    session_id = "test_session"
    user_id = "test_user"

    # Create a new session with the code snippet and a sample GitHub link.
    await session_service.create_session(
        app_name="agentic_code_analyzer",
        user_id=user_id,
        session_id=session_id,
        state={
            "code_snippet": code_snippet,
            "github_link": "https://github.com/GoogleCloudPlatform/python-docs-samples/blob/main/storage/control/storage_control_get_project_intelligence_config.py",
        },
    )

    # Configure the runner with the main orchestrator agent.
    runner = Runner(
        agent=CodeAnalyzerOrchestrator(name="code_analyzer_orchestrator"),
        app_name="agentic_code_analyzer",
        session_service=session_service,
    )

    # Execute the runner asynchronously and capture the final response.
    final_response = ""
    async for event in runner.run_async(
        user_id=user_id,
        session_id=session_id,
        new_message=types.Content(parts=[types.Part(text=code_snippet)]),
    ):
        if (
            event.is_final_response()
            and event.content
            and event.content.parts
            and event.content.parts[0].text
        ):
            final_response = event.content.parts[0].text

    # Pretty-print the final JSON output.
    if final_response:
        print(json.dumps(json.loads(final_response), indent=4))
    else:
        print("No final response was generated by the agent.")


if __name__ == "__main__":
    asyncio.run(main())
